Nuts and Bolts of WebSocket
===========================

## Introduction to WebSocket

* WebSocket introduction slides
* Use http://caniuse.com/websockets to check WebSocket compatibility
* Chrome Developer Tools, Console
+
[source,text]
----
ws = new WebSocket("ws://echo.websocket.org");
ws.send("hello world");
----
+
* In Network tab, show WebSocket frames
* Define message handlers
+
[source, text]
----
ws.onmessage = function(evt) { console.log(evt) }
----
+
or
+
[source, text]
----
ws.onmessage = function(evt) { alert(evt.data) }
----
+
* Copy/paste fragment from websocket.org/echo.html
** Talk about Firefox Developer Tools
* Click on `Connect' on http://www.websocket.org/echo.html. Show how messages sent from Developer Tools are not echoed back on HTML page, and vice versa.
* Talk points
** WebSocket server is required, just like HTTP
** Do you want to write your own WebSocket server or use that is already battle-tested ? For example, 200-line HTTP server is useful to begin with but production nginx or HTTPD are used in production

## Node.js

### Get started with OpenShift

. Create a new account https://www.openshift.com/app/account/new
. Install rhc client from https://developers.openshift.com/en/getting-started-client-tools.html

### Create your first NodeJS application on OpenShift

. Install NodeJS
. Create a NodeJS application on OpenShift
. `git clone <workspace>`
. `npm install` (will install the modules locally)
. `git add --all`
. `git commit`
. `git push`

### Echo server

. Replace `server.js` with https://github.com/arun-gupta/nuts-and-bolts-of-websocket/blob/master/src/server.js
. `npm install --save ws`
. `git add --all`
. `git commit`
. `git push`
. Access http://<appname>-<domain>.rhcloud.com/server.js to show changes.

#### Test the echo server

. Use http://www.websocket.org/echo.html
. Connect to ws://<appname>-<domain>.rhccloud.com:8000
. Send some messages and see the response

### WebSocket in OpenShift

image::images/openshift-websocket-routing.png[]

## JSR 356

### Introduction

Slides

### Chat Server

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/chat

#### Deploy to OpenShift

http://blog.arungupta.me/2014/10/websocket-chat-wildfly-openshift-techtip51/

### Collaborative Whiteboard

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/whiteboard

#### Deploy locally to WildFly

. Download WildFly 8.1 http://download.jboss.org/wildfly/8.1.0.Final/wildfly-8.1.0.Final.zip
. Unzip and start as `bin/standalone.sh`
. Deploy the sample as `mvn wildfly:deploy` from whiteboard directory

### URI templating matching - message routing

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/parameters

### Client API

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/google-docs

### Programmatic endpoint

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/endpoint-singleton

## Securing WebSocket

### User-based security

http://blog.arungupta.me/2014/10/securing-websockets-username-password-servlet-security-techtip49/

### Over TLS

http://blog.arungupta.me/2014/10/securing-websocket-wss-https-tls-techtip50/

## Embedded WebSocket using Undertow

. git clone git@github.com:undertow-io/undertow.git
. `mvn install` in the root
. `mvn exec:exec` in `examples' directory

## JBoss EAP 6.3

. Clone https://github.com/arun-gupta/wildfly-samples/tree/master/websocket-eap63
. Start EAP 6.3
. Setup NIO connector
+
[source. java]
----
./bin/jboss-cli.sh -c --command="/subsystem=web/connector=http/:write-attribute(name=protocol,value=org.apache.coyote.http11.Http11NioProtocol)
> 
jboss-eap-6.3> ./bin/jboss-cli.sh -c --command="/subsystem=web/connector=http/:write-attribute(name=protocol,value=org.apache.coyote.http11.Http11NioProtocol)"
{
    "outcome" => "success",
    "response-headers" => {
        "operation-requires-reload" => true,
        "process-state" => "reload-required"
    }
}
----
+
. Reload configuration
+
[source, java]
----
./bin/jboss-cli.sh -c --command="reload"
----
+
. mvn package jboss-as:deploy
. Access the application at http://localhost:8080/websocket-chat-1.0-SNAPSHOT/

## Load Balance

http://blog.arungupta.me/2014/08/load-balance-websockets-apache-httpd-techtip48/

## STOMP over WebSocket

. Provision ActiveMQ on OpenShift: https://github.com/arun-gupta/activemq-openshift-cartridge
. https://github.com/arun-gupta/wildfly-samples/tree/master/websocket-stomp
. Showcase http://demo.kaazing.com/demo/jms/javascript/?d=stomp-stock with ActiveMQ on OpenShift

## Pub/Sub over WebSocket

. Kaazing JMS Gateway
. https://github.com/arun-gupta/kaazing-openshift-cartridge
. Showcase http://demo.kaazing.com/demo/jms/javascript/jms-javascript.html

## Compare with REST

. https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/websocket-vs-rest-payload
. https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/websocket-vs-rest

## Compare with SSE

Slides

## MQTT over WebSocket

TBD

## WebSocket using Atmosphere

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/atmosphere-chat

## What makes them scalable ?

Slides

## WebSocket Debugging

Slides

## Production Tips

Slides

## Client technologies (supporting other languages - Java APIs or .NET APIs)

. Kaazing Client API
. Native App (Objective C and Java Android)

## Embedded and IoT

. Reveal the fun

## Cool demos

. http://twglobe-shifter.rhcloud.com/ using pubnub, pusher.io and twitter streaming API
. http://gist-reveal.it

